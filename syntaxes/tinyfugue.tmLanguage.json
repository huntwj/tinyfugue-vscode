{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "TinyFugue",
	"patterns": [{
			"include": "#comments"
		},
		{
			"include": "#commands"
		}
	],
	"repository": {
		"built-in-commands": {
			"patterns": [{
					"name": "keyword.control.tinyfugue",
					"match": "\\/(!)?([#@])?(dokey|echo|else|endif|loaded|log|quote|require|result|return|undef)\\b"
				},
				{
					"begin": "(?:(?<=^)|(?<= ))\\/(!)?([#@])?def\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.tinyfugue"
						}
					},
					"end": "(?<!-)\\b([_\\w][_\\w\\d]*)\\s*(=)?|$",
					"endCaptures": {
						"1": {
							"name": "variable.tinyfugue"
						}
					},
					"contentName": "meta.parameter.type.variable.tinyfugue",
					"patterns": [{
						"include": "#def-options"
					}]
				},
				{
					"begin": "(?:(?<=^)|(?<= ))\\/(!)?([#@])?test\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.tinyfugue"
						}
					},
					"contentName": "meta.expression.tinyfugue",
					"end": "(?=%;|$)",
					"patterns": [{
						"include": "#expressions"
					}]
				},
				{
					"begin": "(?:(?<=^)|(?<= ))(\\/(?:let|set))\\s+([_\\w]+)\\s*([= ])?",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.tinyfugue"
						},
						"2": {
							"name": "variable.tinyfugue"
						}
					},
					"end": "(?!%;|$)",
					"patterns": [{
						"include": "#macro-expansions"
					}]
				},
				{
					"begin": "(?:(?<=^)|(?<= ))(\\/(?:else)?if)\\s+(\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.tinyfugue"
						},
						"2": {
							"name": "meta.brace.round.tinyfugue"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "meta.brace.round.tinyfugue"
						}
					},
					"contentName": "meta.expression.tinyfugue",
					"patterns": [{
						"include": "#expressions"
					}]
				}
			]
		},
		"built-in-functions": {
			"patterns": [{
				"name": "meta.function.call.tinyfugue",
				"begin": "\\b(getopts|ismacro|replace|strcat|strstr|substr)\\(",
				"beginCaptures": {
					"1": {
						"name": "support.class.builtin"
					}
				},
				"end": "\\)",
				"patterns": [{
					"include": "#expressions"
				}]
			}]
		},
		"commands": {
			"patterns": [{
					"include": "#built-in-commands"
				},
				{
					"include": "#commands--macros"
				},
				{
					"include": "#commands--simple"
				}
			]
		},
		"commands--simple": {
			"patterns": [{
				"begin": "(?:(?<=^)|(?<=%;))\\s*[^\\/\\s]",
				"end": "%;|$",
				"name": "markup.bold",
				"patterns": [{
					"include": "#expansions"
				}]
			}]
		},
		"strings": {
			"patterns": [{
				"name": "string.quoted.double.tinyfugue",
				"begin": "\"",
				"end": "\"",
				"patterns": [{
					"name": "constant.character.escape.tinyfugue",
					"match": "\\\\."
				}]
			}, {
				"name": "string.quoted.single.tinyfugue",
				"begin": "'",
				"end": "'",
				"patterns": [{
					"name": "constant.character.escape.tinyfugue",
					"match": "\\\\."
				}]
			}]
		},
		"comments": {
			"patterns": [{
					"name": "comment.line.semicolon.tinyfugue",
					"match": "^;.*$"
				},
				{
					"name": "invalid.illegal.comment.tinyfugue",
					"match": "^\\s+;.*$"
				}
			]
		},
		"def-options": {
			"patterns": [{
					"begin": "(-t)(')",
					"beginCaptures": {
						"1": {
							"name": "meta.parameter.type.variable"
						},
						"2": {
							"name": "string.regexp.def.tinyfugue"
						}
					},
					"end": "((?<!\\\\)|(?<=\\\\\\\\))(')",
					"endCaptures": {
						"0": {
							"name": "string.regexp.def.tinyfugue"
						}
					},
					"contentName": "string.regexp.def.tinyfugue"
				},
				{
					"begin": "(-t)(\")",
					"beginCaptures": {
						"1": {
							"name": "meta.parameter.type.variable"
						},
						"2": {
							"name": "string.regexp.def.tinyfugue"
						}
					},
					"end": "((?<!\\\\)|(?<=\\\\\\\\))(\")",
					"endCaptures": {
						"0": {
							"name": "string.regexp.def.tinyfugue"
						}
					},
					"contentName": "string.regexp.def.tinyfugue"
				},
				{
					"match": "(-m)(?:(simple|glob|regexp)|([\\w]+))",
					"captures": {
						"1": {
							"name": "meta.parameter.type.variable"
						},
						"2": {
							"name": "constant.tinyfugue"
						},
						"3": {
							"name": "invalid.illegal.tinyfugue"
						}
					}
				},
				{
					"match": "(-p)(?:(\\d+(?=\\s))|([^ ]+))",
					"captures": {
						"1": {
							"name": "meta.parameter.type.variable"
						},
						"2": {
							"name": "constant.tinyfugue"
						},
						"3": {
							"name": "invalid.illegal.tinyfugue"
						}
					}
				}
			]
		},
		"expansions": {
			"patterns": [{
				"include": "#expansions--expression-evaluation"
			}]
		},
		"expansions--expression-evaluation": {
			"patterns": [{
				"begin": "\\$\\[",
				"beginCaptures": {
					"0": {
						"name": "punctuation.definition.template-expression.begin.tinyfugue"
					}
				},
				"end": "\\]",
				"endCaptures": {
					"0": {
						"name": "punctuation.definition.template-expression.end.tinyfugue"
					}
				},
				"patterns": [{
					"include": "#expressions"
				}]
			}]
		},
		"expansions--operators": {
			"patterns": [{
					"name": "invalid.newline",
					"match": "(%;)?\\\\(?!$)"
				},
				{
					"name": "invalid.newline",
					"match": "%;$"
				},
				{
					"name": "keyword.operator.tinyfugue",
					"match": "%;\\\\$"
				}
			]
		},
		"expansions--variables": {
			"patterns": [{
					"name": "invalid.deprecated",
					"match": "(%)(\\w+)"
				},
				{
					"contentName": "variable.tinyfugue",
					"begin": "%\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.begin.tinyfugue"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.end.tinyfugue"
						}
					},
					"patterns": [{
						"include": "#expansions--variables"
					}]
				}
			]
		},
		"expressions": {
			"patterns": [{
					"include": "#strings"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#expressions--functions"
				},
				{
					"include": "#expressions--variables"
				},
				{
					"include": "#expressions--operators"
				}
			]
		},
		"expressions--functions": {
			"patterns": [{
				"include": "#built-in-functions"
			}, {
				"include": "#user-functions"
			}]
		},
		"expressions--operators": {
			"patterns": [{
					"name": "keyword.operator.tinyfugue",
					"match": "==|:=|=~|!"
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.begin.tinyfugue"
						}
					},
					"contentName": "variable.tinyfugue",
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.template-expression.end.tinyfugue"
						}
					}
				}
			]
		},
		"expressions--variables": {
			"patterns": [{
				"name": "variable.name.tinyfugue",
				"match": "\\b\\w+\\b"
			}]
		},
		"commands--macros": {
			"patterns": [{
				"name": "support.class.builtin",
				"match": "(?:(?<=^)|(?<= ))\\/(alias|car)\\b"
			}, {
				"name": "entity.name.function",
				"match": "(?:(?<=^)|(?<= ))\\/(\\w+)\\b"
			}]
		},
		"macro-expansions": {
			"patterns": [{
					"include": "#expansions--variables"
				},
				{
					"include": "#expansions--operators"
				},
				{
					"include": "#expansions--expression-evaluation"
				}
			]
		},
		"numbers": {
			"patterns": [{
				"name": "constant.numeric.tinyfugue",
				"match": "\\d+(?:\\.(?:\\d+)?)?"
			}]
		},
		"user-functions": {
			"patterns": [{
				"name": "meta.function.call.tinyfugue",
				"begin": "\\b(\\w+)\\(",
				"beginCaptures": {
					"1": {
						"name": "support.function.tinyfugue"
					}
				},
				"end": "\\)",
				"patterns": [{
					"include": "#expressions"
				}]
			}]
		}
	},
	"scopeName": "source.tinyfugue"
}
